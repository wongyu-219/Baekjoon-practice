import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;
import java.util.Comparator;
//정렬 후 이분탐색을 통해 target값의 범위를 구함(양 끝값의 인덱스) 
//그 후 양 끝값을 서로 빼서 갯수를 저장 후 출력

class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    StringTokenizer st = new StringTokenizer(br.readLine());
    int[] arr1 = new int[n];
   
    for(int i = 0; i < n; i++) {
      arr1[i] = Integer.parseInt(st.nextToken());
    }
    Arrays.sort(arr1);
    
    int m = Integer.parseInt(br.readLine());
    st = new StringTokenizer(br.readLine());
    StringBuilder sb = new StringBuilder();

    for(int i = 0; i < m; i++) {
      int target = Integer.parseInt(st.nextToken());

      sb.append(high(arr1, target) - low(arr1, target)).append(' ');
    }
    System.out.println(sb);
  }
  private static int low(int[] arr, int target) {
    int low = 0;
    int high = arr.length;

    while(low < high) {
      int mid = (low + high) / 2;
      if(arr[mid] < target) {
        low = mid + 1;
      }
      else {
        high = mid;
      }
    }
    return low;
  }

  private static int high(int[] arr, int target) {
    int low = 0;
    int high = arr.length;
    while(low < high) {
      int mid = (low + high) / 2;
      if(arr[mid] <= target) {
        low = mid + 1;
      }
      else {
        high = mid;
      }
    }
    return low;
  }
}
//1111223
