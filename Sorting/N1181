import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.io.IOException;

class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    int num = Integer.parseInt(br.readLine());
    String[] arr = new String[num];

    for(int i = 0; i < arr.length; i++) {
      arr[i] = br.readLine();
    }

    Comparator<String> lengthComparator = Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder());
/*Arrays.sort(arr, new Comparator<String>() {
			public int compare(String s1, String s2) {
				// 단어 길이가 같을 경우 
				if (s1.length() == s2.length()) {
					return s1.compareTo(s2);
				} 
				// 그 외의 경우 
				else {
					return s1.length() - s2.length();
				}
			}
		});*/ 
//위 식도 연습해두자 
    Arrays.sort(arr, lengthComparator);

    StringBuilder sb = new StringBuilder();

    sb.append(arr[0]).append('\n'); // 첫번째 문자열 추가 후
    for(int i = 1; i < arr.length; i++) {
      if(!arr[i].equals(arr[i-1])) {
        sb.append(arr[i]).append('\n');
      }// 바로 전 배열만 비교하는 이유는 이미 정렬을 했기 때문이다.
    }

    System.out.println(sb);

    
  }
}
