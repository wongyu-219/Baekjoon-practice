import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

class Main {
  public static void main(String[] args) throws IOException{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int totalKg = Integer.parseInt(br.readLine());
    int cnt = 0;
    
    if(totalKg != 4 && totalKg != 7)  {
      if(totalKg % 5 == 0) {
        cnt = totalKg / 5;
        System.out.println(cnt);
      } else {
        if(totalKg % 5 == 3) {
          cnt = totalKg / 5 + 1;
        } else if(totalKg % 5 == 2) {
          cnt = (totalKg - 12) / 5 + 4;
        } else if(totalKg % 5 == 1) {
          cnt = (totalKg - 6) / 5 + 2;
        } else {
          cnt = (totalKg - 9) / 5 + 3;
        }
        System.out.println(cnt);
      }
    } else {
      System.out.println("-1");
    }
    
    
  }
}

// 3 6 9 12 15 18 21 24 27
// 5 10 15 20 25 30 35
// 8 16 24 32 40 48
// 11 13 14 17 19
// 1 2 3 4

//n = 3*x + 5*y
// cnt = x + y
// 3 < 3*x + 5*y < 5000
// x+y >= 2루트xy
// 4, 7, 

// 실제로 2보다 큰 모든 짝수는 소수의 합으로 나타낼 수 있다.
// 홀수의 경우는 위 수에 3을 더하면 되므로 사실상 모든 수가 소수의 합으로 이루어져 있다.
// 이 문제의 경우 3과 5가 주어졌기 때문에, 3과 5를 더한 8 이상의 수는 소수의 합으로 나타낼 수 있다.
// 그리디 알고리즘 : 가장 최적의 선택  ex 동전문제, 위 문제처럼 큰 수 기준으로 케이스 분류
